import React from "react";
import {View, Text, Pressable, SafeAreaView, Linking, TouchableOpacity } from "react-native"
import Toast from "components/Toast";
import Loading from "components/Loading"
import * as Location from 'expo-location';
import { useState, useEffect } from 'react';
import { formatString, predictClass, buildFeatures, recursiveRequest } from "functions";
import type { ToastType, ParkingStatus } from "types";
import Alert from "components/Alert";
import AntDesign from '@expo/vector-icons/AntDesign';
import Entypo from '@expo/vector-icons/Entypo';
import MaterialIcons from '@expo/vector-icons/MaterialIcons';
import LocationEncoder from "assets/location_encoder.json"

import {Coordinate} from "types"

// Add type for LocationEncoder to avoid type errors
const LocationEncoderTyped: { [key: string]: number } = LocationEncoder as { [key: string]: number };
let interval: ReturnType<typeof setInterval>;
export default function Dashboard() {
    const [location, setLocation] = useState<Location.LocationObject | null>(null);

    const [loading, setLoading] = useState<boolean>(true);
    const [address, setAddress] = useState<string | null>(null)


    const [parkingStatus, setParkingStatus] = useState<ParkingStatus>({
      isOpen: true,
      minutesAvailable: 40,
      url: "https://www.google.com/maps/search/?api=1&query=37.7749,-122.4194"
    });
    // const [endTime, setEndTime] = useState<number | null>(null);
    // Represents the amount of miliseconds
    const [timer, setTimer] = useState<number | null>(null)

    const [errorMsg, setErrorMsg] = useState<ToastType>({
        message: "",
        isWarning: false,
    });

// type FeaturesType = [number, number, number, number, number]


 




    const openMap = async () => {
      console.log("Open maps was called", parkingStatus.url)
      if (parkingStatus.url&&parkingStatus.url!=="") {
        try {
        const supported = await Linking.canOpenURL(parkingStatus.url);

        if (supported) {
          await Linking.openURL(parkingStatus.url)
        } else {
          console.log("Chat this is fried.")
        }


      } catch(e) {
        console.error("Something happened here")
      }
      } else {
        console.log("parking status is undefined u bum")
      }
      



    }

    // const predictClass = (features: FeaturesType) => {
    // console.log("in the predict class")
  
    // // This error is just wrong chat
    // const probabilities = score(features);
    // console.log("just passed probabilities")
    // let maxIndex = 0;
    // for (let i = 1; i < probabilities.length; i++) {
    //   if (probabilities[i] > probabilities[maxIndex]) {
    //     maxIndex = i;
    //   }
    // }
    // console.log("our prediction", maxIndex)
    // return maxIndex; // return index of the highest probability

    // }
    
   
   
    useEffect(() => {
     (async () => {
       let { status } = await Location.requestForegroundPermissionsAsync();
       if (status !== 'granted') {
         setErrorMsg({
            isWarning: true,
            message: "Something went wrong"
         });
         
         return;
       } else {
          setErrorMsg({
            isWarning: false,
            message: "Working as Intended"
          })

          // The api would return a Date.now() timestamp that would represent the time in which the AI "guarantees" the free spot
          const valueGivenByApi: number = Date.now() + 3600000

          setAddress("9212 cedarcrest dr 20814")

          console.log(valueGivenByApi)
          console.log("Heres the thing here")

          interval = setInterval(() => {
            setTimer(valueGivenByApi - Date.now())


          }, 1000)


       }

      let location = await Location.getCurrentPositionAsync({});
      const { latitude, longitude } = location.coords;
      console.log("latitude: ", latitude)
    

      // const features: number[] = buildFeatures(latitude, longitude);
      // const pred = predictClass(features);

      // console.log(pred)
            // <Text>Latitude: {location.coords.latitude}</Text>
            // <Text>Longitude: {location.coords.longitude}</Text>
      //  console.log(buildFeatures(location.coords.latitude, location.coords.longitude)) 
       let pred = {latitude: 0, longitude: 0}
      //  const pred = recursiveRequest(latitude, longitude, 20, [])
       
      //  If array, that means no parking spot was found
       if (Array.isArray(pred)) {
         setParkingStatus({
          isOpen: false,
          minutesAvailable: 0,
          url: ""
        })
       } else if (pred && typeof pred.latitude === "number" && typeof pred.longitude === "number") {
        // This means a parking spot was found
        setParkingStatus({
          isOpen: true,
          minutesAvailable: 30, // hard coded for now, but will implement later
          url: `https://www.google.com/maps/search/?api=1&query=${pred.latitude},${pred.longitude}`
        })
       } else {
        setParkingStatus({
          isOpen: false,
          minutesAvailable: 0,
          url: ""
        })
       }
      



       setLocation(location);
       setLoading(false)
      //  openMap()

       console.log("Full location object:", location);
     })();

     return () => {
      clearInterval(interval)
     }


   }, []);



   const requestNew = (latitude: number, longitude: number) => {
    const pred = recursiveRequest(latitude,longitude,20, [{latitude: latitude, longitude: longitude}])

    if (Array.isArray(pred)) {
         setParkingStatus({
          isOpen: false,
          minutesAvailable: 0,
          url: ""
        })
       } else if (pred && typeof pred.latitude === "number" && typeof pred.longitude === "number") {
        // This means a parking spot was found
        setParkingStatus({
          isOpen: true,
          minutesAvailable: 30, // hard coded for now, but will implement later
          url: `https://www.google.com/maps/search/?api=1&query=${pred.latitude},${pred.longitude}`
        })
       } else {
        setParkingStatus({
          isOpen: false,
          minutesAvailable: 0,
          url: ""
        })
       }



   }



    return (
        <>

        <View className="h-full">
        {(errorMsg.message.length>0) && (
             <Toast isWarning={errorMsg.isWarning} message={errorMsg.message} />
        )}




          
<TouchableOpacity
  onPress={() => {
    console.log('âœ… Pressed!');
  }}
  style={{
    backgroundColor: 'red',
    padding: 20,
    borderRadius: 12,
    marginTop: 100,
  }}
>
  <Text style={{ color: 'white' }}>TEST BUTTON</Text>
</TouchableOpacity>


        {loading ? <>
        <Loading />
        </> : <>
         {(location!==null) && (

            parkingStatus.isOpen ?
            <View className="h-screen">
            <View className="m-3 flex-col gap-2">
              <View className="p-2 bg-success rounded-md">
                <Text className="text-center text-success-content font-inter-bold text-lg">Parking Available</Text>

                




              </View>

              <View className="p-3 rounded-md border-neutral min-h-[20vh] flex-col items-center justify-center">



              {/* Timer Component */}
            {timer!==null&&timer!==undefined&&parkingStatus.url && (

              <View className="flex-row items-center mx-auto w-fit gap-2 bg-primary rounded-full  px-4 py-3">
                
                {/* Hours */}
                <View>
                  <Text className="font-inter text-5xl text-primary-content">
                    {Number(new Date(timer ?? 0).getHours())}
                  </Text>
                </View>


                <View>
                  <Text className="font-inter text-5xl text-primary-content">:</Text>
                
                </View>

                <View>
                  <Text className="font-inter text-5xl text-primary-content">
                    {Number(new Date(timer ?? 0).getMinutes())}
                  </Text>  
                </View>

                <View>
                  <Text className="text-primary-content text-5xl font-inter">:</Text>
                
                </View>


                <View>
                  <Text className="font-inter text-5xl text-primary-content">
                    {new Date(timer ?? 0).getSeconds()}
                  </Text>  
                </View>

              </View>
            )}
              

              <Text className="text-center text-xl font-inter-bold mt-2">Time Left</Text>

              </View>

              <View className="bg-base-300 rounded-box p-4 border-md flex-col gap-2">

                <Text className=" text-xl font-inter-bold text-center">Spot Information</Text>

                <Text className="font-inter text-lg text-center">
                  Address: {formatString(address ?? "")}
                </Text>

                <TouchableOpacity
  onPress={() => openMap()}
  className="w-5/6 mx-auto p-3 bg-base-100 rounded-box flex-row gap-3 items-center justify-center"
  style={{ minHeight: 48 }}
>
    <MaterialIcons name="maps-home-work" size={24} color="black" />
      <Text className="text-center text-base-content font-inter text-xl">
        Open in Maps
      </Text>
    </TouchableOpacity>


                <Alert isWarning={true} message="Note: This app isn't a guarantee that this spot will be open, but rather a very calculated and informed guess. This app can be wrong. Park at your own risk." />


                <Text className="font-inter-bold text-center">Pro Tip: Try to keep your car parking for less than 45 minutes to lower your risk.</Text>
             
              </View>

              
              

            </View>
             <SafeAreaView className="flex-0 flex-col gap-2 items-center justify-center ">
              <Pressable className="w-5/6 h-fit p-3 bg-error hover:opacity-85 rounded-box flex-row gap-4 items-center justify-center">
              <Entypo name="flag" size={24} color="black" />
      <Text className="text-center text-white font-inter text-xl">
        Report an Issue
      </Text>
    </Pressable>
    <Pressable className="w-5/6 h-fit p-3 gap-4 bg-accent rounded-box flex-row items-center justify-center">
    <AntDesign name="car" size={24} color="black" />
      <Text className="text-center text-white font-inter text-xl">
        Request another spot
      </Text>
    </Pressable>
     
  </SafeAreaView>




            </View>

            : <View>
                  <Text>Parking status is closed for some rason</Text>


              </View>
            
            


            // <View>
            // <Text>Latitude: {location.coords.latitude}</Text>
            // <Text>Longitude: {location.coords.longitude}</Text>
            // </View>

        )}
        
        
        </>}
       
        
       
        </View>
        


        
        
        
        </>
    )
}